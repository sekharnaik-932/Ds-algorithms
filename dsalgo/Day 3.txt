multiply(numberOne, numberTwo){
	return numberOne*numberTwo;
}

hof(callback){

}

hof((x,y)->x*y)

List<Integer> numList=Arrays.asList(1,2,5,4)
numList.stream().reduce((x,y)->x+y).orElse(0)

List<String> words=Arrays.asList("Efficient Coding","Functional Programming","Time complexity","Recursion");

words.stream().reduce((word1,word2)->word1.length()>=word2.length()?word1:word2);

Algorithm Design Techniques

Brute Force
Greedy Approach
Divide and Conquer
Dynamic Programming


Greedy Approach - we find locally optimal solutions - we try to find an optimal solution at each and every step

Three possible outcomes

1. We get a globally optimal solution
2. We get a solution but not a globally optimal solution
3. We do not get a solution


Change making problem

Case 1

34 - 4 currency notes (20,10,2,2)

20,10,5,2

34   20
14   10
4    2
2    2


Case 2

20 - 6 currency notes (15,1,1,1,1,1)

15, 10, 1

20 15
5  1
4  1
3  1
2  1
1  1


Case 3

20 - No solution

15, 10

20 15
5

Traveling Salesman problem

25 cities

24!=6.2*10^23

A->B->D->C


Divide and Conquer

  Divide the original problem into sub-problems
  Conquer or solve the sub-problems individually
  Combine the solutions to get the solution for the original problem




