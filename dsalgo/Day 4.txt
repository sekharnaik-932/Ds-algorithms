Algorithm Design Techniques

Brute Force
Greedy Approach
Divide and Conquer - sub-problems are independent of each other

Advantages
Solves difficult problem with ease
Supports parallelism

Disadvantages
Uses recursion and hence, it may require extra space

Dynamic Programming - divides the problem into sub-problems - sub-problems are dependent on each other or overlapping

Fibonacci numbers

f(0)=0
f(1)=1
f(2)=f(1)+f(0)=1+0=1
f(3)=f(2)+f(1)=1+1=2

f(n)=f(n-1)+f(n-2)

f(6)

f(6)=f(5)+f(4)
f(5)=f(4)+f(3)
f(4)=f(3)+f(2)
f(3)=f(2)+f(1)

Top-Down Approach or Memoization
Bottom-Up Approach or Tabulation

Top-Down Approach or Memoization

f(6)

f(6)=5+3=8

fib[0]=0
fib[1]=1
fib[2]=1
fib[3]=2
fib[4]=3
fib[5]=5


Bottom-Up Approach or Tabulation

f(6)

fib[n+1]

fib[0]=0
fib[1]=1

for(i=2;i<=n;i++)
	fib[i]=fib[i-1]+fib[i-2]

return fib[n]

fib[2]=fib[1]+fib[0]=1
fib[3]=fib[2]+fib[1]=1+1=2
fib[4]=fib[3]+fib[2]=2+1=3
fib[5]=fib[4]+fib[3]=3+2=5
fib[6]=fib[5]+fib[4]=5+3=8


fib[3]

fib[0]=0
fib[1]=1

for(i=2;i<=n;i++){
	fib[2]=fib[1]+fib[0]
	fib[0]=fib[1]
	fib[1]=fib[2]
}
return fib[2]

fib[0]=0
fib[1]=1

i=2
fib[2]=1
fib[0]=1
fib[1]=1

i=3
fib[2]=2
fib[0]=1
fib[1]=2

i=4
fib[2]=3
fib[0]=2
fib[1]=3

i=5
fib[2]=5
fib[0]=3
fib[1]=5

i=6
fib[2]=8
fib[0]=5
fib[1]=8

 2     1   0
f(2)=f(1)+f(0)
            0
f(3)=f(2)+f(1)


Graphs

A collection of nodes and edges


class Node{
	int id;
	LinkedList<Node> adjacentNodes
	Constructor(int value){
		id=value;
	} 

}

Node getNode(int id)


boolean depthFirstSearch(int source, int destination){
	Node s=getNode(source);
	Node d=getNode(destination);
	Collection to store the visited nodes - vN
	return checkPathUsingDFS(s,d,vN);

}

boolean checkPathUsingDFS(Node s,Node d,vN){
	if s is present in vN
		return false
	Add s to vN

	if(s==d)
		return true
	Run a loop in the adjacent nodes of s - for(Node adjacent: s.adjacentNodes){
		if(checkPathUsingDFS(adjacent,d,vN))
			return true;

	}
	return false;
}


boolean breadthFirstSearch(int source, int destination){
	Node s=getNode(source);
	Node d=getNode(destination);
	return checkPathUsingBFS(s,d);

}

boolean checkPathUsingBFS(Node s,Node d){

	Create a queue - nodesToBeVisited
	Collection to store the visited nodes - vN
	Add s to nodesToBeVisited

	Run a loop till the queue is empty - while(!nodesToBeVisited.isEmpty()){
		Node node=Dequeue the element from the queue
		if(node==d)
			return true

		if node is present in vN
			continue

		Add node to vN
		
		Run a loop in the adjacent nodes of node - for(Node adjacent: node.adjacentNodes){
			Add adjacent to nodesToBeVisited
		}

	}
	return false
}




























